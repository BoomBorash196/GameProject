using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Audio;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using static GameProject.Game1;

namespace GameProject
{
    public class Game1 : Game
    {
        private GraphicsDeviceManager _graphics;
        private SpriteBatch _spriteBatch;
        private LevelManager _levelManager;
        private int[,] map;

        private double _posX = 1.5, _posY = 1.5;
        private double dirX = -1.0, dirY = 0.0;
        private double planeX = 0.0, planeY = 0.66;

        private float mouseSensitivity = 0.002f;
        private MouseState prevMouseState;

        private Texture2D pixel;
        private List<TextureData> wallTextures;
        private const double CollisionBuffer = 0.3;

        public class TextureData
        {
            public Texture2D Texture { get; set; }
            public Color[] Data { get; set; }
        }

        public static int screenWidth { get; set; } = 640;
        public static int screenHeight { get; set; }  = 480;

        public enum GameState
        {
            MainMenu,
            Playing,
            Settings,
            SoundSettings,
            ControlsSettings,
            Radio,
            Exit
        }
        public static GameState CurrentGameState = GameState.MainMenu;

        private MainMenu _mainMenu;
        private SpriteFont _font;
        private SettingsMenu _settings;
        private SoundMenu _soundMenu;
        private ControlsMenu _controlsMenu;

        private Texture2D _backgroundTexture;
        private float[] _wallDistances;

        public Radio _radioMenu;
        public SoundEffect[] _radioTracks;

        private SoundEffect _backgroundMusic;
        private SoundEffectInstance _backgroundMusicInstance;

        private Renderer _renderer;

        private KeyboardState _prevKeyboardState;
        public static GameState _prevGameState = GameState.MainMenu;

        private Shotgun _shotgun;
        private List<Texture2D> _shotgunFrames;
        private Texture2D _shotgunTexture;
        private Texture2D _bulletTexture;
        private List<Texture2D> _muzzleFlashTextures;
        private SoundEffect _shotgunSound;
        private SoundEffectInstance _shotgunSoundInstance;

        private Minimap _minimap;

        private List<Enemy> _enemies;
        private float _spawnTimer = 0f;
        private float _spawnInterval = 10f; // Спавн каждые 10 секунд
        private int _maxEnemies = 2;

        private GraphicsManager _graphicsManager;
        private GameLogic _gameLogic;

        public Game1()
        {
            _graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
            IsMouseVisible = false;
            _graphics.IsFullScreen = false;
            TargetElapsedTime = TimeSpan.FromSeconds(1.0 / 60.0); 
            _levelManager = new LevelManager();
        }
        // оставляем
        protected override void Initialize()
        {
            Mouse.SetPosition(
                GraphicsDevice.Viewport.Width / 2,
                GraphicsDevice.Viewport.Height / 2
            );
            prevMouseState = Mouse.GetState();

            _prevKeyboardState = Keyboard.GetState();
            _wallDistances = new float[screenWidth];

            _graphics.PreferredBackBufferWidth = screenWidth;
            _graphics.PreferredBackBufferHeight = screenHeight;

            _graphics.ApplyChanges();

            var currentLevel = _levelManager.GetCurrentLevel();
            _posX = currentLevel.PlayerSpawnPoint.X;
            _posY = currentLevel.PlayerSpawnPoint.Y;
            map = currentLevel.Map;

            base.Initialize();
        }

       
        // оставляем
        protected override void LoadContent()
        {
            _radioTracks = new SoundEffect[]
            {
                Content.Load<SoundEffect>("Radio/antisocial"),
                Content.Load<SoundEffect>("Radio/ashes"),
                Content.Load<SoundEffect>("Radio/Shikami")
            };
            _backgroundTexture = Content.Load<Texture2D>("backgrounds/wolfenstein");

            _spriteBatch = new SpriteBatch(GraphicsDevice);

            _font = Content.Load<SpriteFont>("RetroFont");

            _backgroundMusic = Content.Load<SoundEffect>("background_sounds/bgSound");
            _backgroundMusicInstance = _backgroundMusic.CreateInstance();
            _backgroundMusicInstance.IsLooped = true;
            _backgroundMusicInstance.Play();

            _mainMenu = new MainMenu(_font, _backgroundTexture);
            _settings = new SettingsMenu(_font, _backgroundTexture, this);
            _soundMenu = new SoundMenu(_font, _backgroundTexture, _backgroundMusicInstance);
            _controlsMenu = new ControlsMenu(_font, _backgroundTexture);
            _radioMenu = new Radio(_font, _backgroundTexture, _radioTracks);

            pixel = new Texture2D(GraphicsDevice, 1, 1);
            pixel.SetData(new[] { Color.White });

            _shotgunFrames = new List<Texture2D>
            {
                Content.Load<Texture2D>("weapons/shotgun"),
                Content.Load<Texture2D>("weapons/shotgun"),
                Content.Load<Texture2D>("weapons/shotgun1"),
                Content.Load<Texture2D>("weapons/shotgun2"),
                Content.Load<Texture2D>("weapons/shotgun3")
            };
            _shotgunTexture = _shotgunFrames[0];
            _bulletTexture = Content.Load<Texture2D>("weapons/bullet");
            _muzzleFlashTextures = new List<Texture2D>
            {
                Content.Load<Texture2D>("weapons/shotgun_fire_effect1"),
                Content.Load<Texture2D>("weapons/shotgun_fire_effect2")
            };
            _shotgunSound = Content.Load<SoundEffect>("weapons/sounds/shotgun_sound");
            
            //_minimap = new Minimap(pixel, map);

            wallTextures = new List<TextureData>
            {
                LoadTextureData("world_textures/redbrick"), //1
                LoadTextureData("world_textures/eagle"), //2
                LoadTextureData("world_textures/greenlight"), //3
                LoadTextureData("world_textures/wood"), //4
                LoadTextureData("world_textures/green"), //5
                LoadTextureData("world_textures/mossy"), //6
                LoadTextureData("world_textures/mossy"), //7
            };

            _enemies = new List<Enemy>();

            _shotgun = new Shotgun(_shotgunFrames, _bulletTexture,
                                   _muzzleFlashTextures, _shotgunSound,
                                   GraphicsDevice, screenWidth,
                                   screenHeight, _wallDistances, _enemies, map);

            _renderer = new Renderer(_spriteBatch, GraphicsDevice, wallTextures, screenWidth, screenHeight, _posX, _posY, dirX, dirY, planeX, planeY);
            _renderer.SetCurrentMap(map);

            _graphicsManager = new GraphicsManager(_spriteBatch, GraphicsDevice, _renderer, _shotgun,
                _mainMenu, _settings, _soundMenu, _controlsMenu, _radioMenu, pixel, screenWidth, screenHeight);

            _gameLogic = new GameLogic(_levelManager, map, _posX, _posY, dirX, dirY, planeX, planeY, 
                mouseSensitivity, prevMouseState, _enemies, _shotgun, _wallDistances, _mainMenu, _settings,
                _soundMenu, _controlsMenu, _radioMenu, _backgroundMusicInstance, Content, _renderer, GraphicsDevice);
            
        }
        // оставляем
        private TextureData LoadTextureData(string texturePath)
        {
            if (_textureCache.ContainsKey(texturePath))
            {
                return _textureCache[texturePath];
            }

            try
            {
                Texture2D texture = Content.Load<Texture2D>(texturePath);
                Color[] data = new Color[texture.Width * texture.Height];
                texture.GetData(data);

                var textureData = new TextureData { Texture = texture, Data = data };
                _textureCache[texturePath] = textureData;

                return textureData;
            }
            catch (ContentLoadException ex)
            {
                Debug.WriteLine($"Ошибка загрузки тектуры {texturePath}: {ex.Message}");
                throw;
            }
        }
        // оставляем
        protected override void Draw(GameTime gameTime)
        {
            _graphicsManager.Draw(gameTime, CurrentGameState, map, _gameLogic.GetEnemies(), _gameLogic.GetPlayerPosition(), _gameLogic.GetPlayerRotation());
            base.Draw(gameTime);
        }

        // оставляем
        protected override void Update(GameTime gameTime)
        {
            if (CurrentGameState == Game1.GameState.Exit)
                Exit();

            _gameLogic.Update(gameTime, ref CurrentGameState, ref map);
            base.Update(gameTime);
        }

        
      

        private Dictionary<string, TextureData> _textureCache = new Dictionary<string, TextureData>();

        // оставляем
        protected override void UnloadContent()
        {
            _gameLogic.UnloadContent();
            base.UnloadContent();
        }
    }
}